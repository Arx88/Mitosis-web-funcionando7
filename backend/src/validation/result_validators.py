"""
Result Validators - Sistema de Validaci√≥n de Resultados por Herramienta
PROBLEMA 2: Implementaci√≥n de validaci√≥n rigurosa de resultados antes de marcar como exitoso
+ CORRECCI√ìN CR√çTICA: Validaci√≥n de relevancia tem√°tica
"""

import os
import logging
import re
from typing import Dict, Tuple, Any, List
import json

logger = logging.getLogger(__name__)

def extract_key_terms_from_query(query: str) -> List[str]:
    """
    üéØ NUEVA FUNCI√ìN: Extraer t√©rminos clave de la consulta original para validaci√≥n de relevancia
    
    Args:
        query: Query original de la tarea
        
    Returns:
        Lista de t√©rminos clave que deber√≠an aparecer en el contenido
    """
    if not query:
        return []
    
    # Extraer t√©rminos importantes
    key_terms = []
    
    # 1. Nombres propios y entidades importantes
    proper_nouns = re.findall(r'\b[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]{2,}(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+)*\b', query)
    key_terms.extend([noun.lower() for noun in proper_nouns])
    
    # 2. Productos, marcas y tecnolog√≠as espec√≠ficas
    tech_terms = re.findall(r'\b(?:iphone|android|tesla|apple|google|microsoft|bitcoin|blockchain)\b', query, re.IGNORECASE)
    key_terms.extend([term.lower() for term in tech_terms])
    
    # 3. Palabras significativas de 4+ caracteres que no sean meta
    meta_words = {'buscar', 'informaci√≥n', 'sobre', 'utilizar', 'herramienta', 'an√°lisis', 'crear', 'generar', 'obtener', 'datos'}
    significant_words = re.findall(r'\b[a-z√°√©√≠√≥√∫√±A-Z√Å√â√ç√ì√ö√ë]{4,}\b', query)
    for word in significant_words:
        word_lower = word.lower()
        if word_lower not in meta_words and len(word_lower) >= 4:
            key_terms.append(word_lower)
    
    # 4. N√∫meros de modelo y versiones
    model_numbers = re.findall(r'\b\w*\d+\w*\b', query)
    key_terms.extend([model for model in model_numbers if len(model) > 1])
    
    # Eliminar duplicados manteniendo orden
    unique_terms = []
    seen = set()
    for term in key_terms:
        if term not in seen and len(term) > 2:
            seen.add(term)
            unique_terms.append(term)
    
    return unique_terms[:8]  # M√°ximo 8 t√©rminos m√°s relevantes

def check_content_relevance(content: str, original_query: str, step_title: str = "") -> Tuple[bool, float, str]:
    """
    üéØ NUEVA FUNCI√ìN: Verificar si el contenido es relevante a la consulta original
    
    Args:
        content: Contenido recopilado por la herramienta
        original_query: Query original de la tarea 
        step_title: T√≠tulo del paso (opcional)
        
    Returns:
        Tuple[bool, float, str]: (es_relevante, puntuaci√≥n_relevancia, mensaje_detalle)
    """
    if not content or not original_query:
        return False, 0.0, "Contenido o query vac√≠o"
    
    # Extraer t√©rminos clave del query original
    key_terms = extract_key_terms_from_query(original_query)
    
    if not key_terms:
        return True, 0.5, "No se pudieron extraer t√©rminos clave, asumiendo relevancia"
    
    content_lower = content.lower()
    found_terms = []
    
    # Verificar cu√°ntos t√©rminos clave aparecen en el contenido
    for term in key_terms:
        if term in content_lower:
            found_terms.append(term)
    
    # Calcular puntuaci√≥n de relevancia
    relevance_score = len(found_terms) / len(key_terms) if key_terms else 0.0
    
    # Determinar si es relevante
    is_relevant = relevance_score >= 0.3  # Al menos 30% de t√©rminos clave deben aparecer
    
    # Mensaje detallado
    if is_relevant:
        detail_msg = f"Contenido relevante: {len(found_terms)}/{len(key_terms)} t√©rminos clave encontrados ({relevance_score:.1%}). T√©rminos: {', '.join(found_terms[:5])}"
    else:
        detail_msg = f"Contenido NO relevante: solo {len(found_terms)}/{len(key_terms)} t√©rminos clave encontrados ({relevance_score:.1%}). Esperados: {', '.join(key_terms[:5])}"
    
    return is_relevant, relevance_score, detail_msg

def validate_web_search_result(result: dict, original_query: str = "", step_title: str = "") -> Tuple[str, str]:
    """
    Valida el resultado de una b√∫squeda web CON VALIDACI√ìN DE RELEVANCIA.
    
    Args:
        result: Resultado de la b√∫squeda web
        original_query: Query original de la tarea (NUEVO)
        step_title: T√≠tulo del paso (NUEVO)
    
    Returns:
        Tuple[str, str]: (estado, mensaje)
        Estados: 'success', 'warning', 'failure'
    """
    try:
        if not result or not isinstance(result, dict):
            return 'failure', 'Resultado de b√∫squeda inv√°lido o nulo.'
        
        # Verificar que no haya errores expl√≠citos
        if result.get('error'):
            return 'failure', f'Error en b√∫squeda: {result["error"]}'
        
        # CORREGIDO: Verificar tanto estructura nueva como legacy
        search_results = result.get('search_results', [])
        results_count = result.get('results_count', 0) 
        content = result.get('content', '')
        data = result.get('data', {})
        
        # Obtener contenido para validar (m√∫ltiples fuentes posibles)
        content_to_validate = content
        if not content_to_validate and data:
            if isinstance(data, dict):
                # Buscar contenido en diferentes estructuras
                content_to_validate = data.get('content', '')
                if not content_to_validate and 'results' in data:
                    results = data.get('results', [])
                    if results and isinstance(results, list):
                        # Combinar snippets de resultados
                        snippets = [r.get('snippet', '') for r in results if isinstance(r, dict)]
                        content_to_validate = ' '.join(snippets)
        
        # Si results_count es 0 y no hay content real, es un fallo
        if results_count == 0 and not content_to_validate.strip():
            return 'failure', 'La b√∫squeda no arroj√≥ resultados reales. El sistema report√≥ √©xito pero no recopil√≥ informaci√≥n.'
        
        # Si data est√° vac√≠o y content est√° vac√≠o, es un fallo
        if not data and not content_to_validate.strip():
            return 'failure', 'La b√∫squeda no recopil√≥ informaci√≥n real. Datos y contenido est√°n vac√≠os.'
        
        # Verificar el contenido si existe
        if content_to_validate and len(content_to_validate.strip()) < 50:
            return 'warning', 'La b√∫squeda recopil√≥ muy poca informaci√≥n (menos de 50 caracteres).'
        
        # üöÄ NUEVA VALIDACI√ìN CR√çTICA: Verificar relevancia del contenido
        if original_query and content_to_validate:
            is_relevant, relevance_score, relevance_detail = check_content_relevance(
                content_to_validate, original_query, step_title
            )
            
            if not is_relevant:
                return 'failure', f'CONTENIDO NO RELEVANTE: {relevance_detail}. La b√∫squeda no encontr√≥ informaci√≥n relacionada con la tarea solicitada.'
            elif relevance_score < 0.5:
                return 'warning', f'CONTENIDO PARCIALMENTE RELEVANTE: {relevance_detail}. Puede necesitar b√∫squedas adicionales.'
        
        # Verificar search_results si existen (estructura legacy)
        if search_results:
            valid_results = 0
            for res in search_results:
                if isinstance(res, dict) and all(k in res for k in ['title', 'link']):
                    valid_results += 1
            
            if valid_results == 0:
                return 'failure', 'Los resultados de b√∫squeda no tienen formato v√°lido.'
            
            success_msg = f'B√∫squeda exitosa, {valid_results} resultados v√°lidos encontrados.'
            if original_query:
                success_msg += f' Contenido relevante verificado para: "{original_query[:50]}..."'
            
            return 'success', success_msg
        
        # Si llegamos aqu√≠, verificamos si tenemos contenido real
        if content_to_validate and len(content_to_validate.strip()) >= 50:
            success_msg = f'B√∫squeda completada con contenido v√°lido ({len(content_to_validate)} caracteres).'
            if original_query:
                success_msg += f' Relevancia verificada para: "{original_query[:50]}..."'
            return 'success', success_msg
        
        # Si no hay resultados v√°lidos en ning√∫n formato
        return 'failure', 'La b√∫squeda no produjo resultados v√°lidos en ning√∫n formato esperado.'
        
    except Exception as e:
        logger.error(f"Error validating web search result: {str(e)}")
        return 'failure', f'Error en validaci√≥n de b√∫squeda: {str(e)}'

def validate_file_creation_result(result: dict) -> Tuple[str, str]:
    """
    Valida el resultado de una creaci√≥n de archivo.
    
    Args:
        result: Resultado de la creaci√≥n de archivo
    
    Returns:
        Tuple[str, str]: (estado, mensaje)
    """
    try:
        if not result or not isinstance(result, dict):
            return 'failure', 'Resultado de creaci√≥n de archivo inv√°lido o nulo.'
        
        # Verificar que se indica que se cre√≥ archivo
        if not result.get('file_created', False):
            return 'failure', 'No se indica que se haya creado archivo.'
        
        file_path = result.get('file_path')
        if not file_path:
            return 'failure', 'No se proporcion√≥ la ruta del archivo creado.'
        
        # Verificar existencia f√≠sica del archivo
        if not os.path.exists(file_path):
            return 'failure', f'El archivo no fue encontrado en la ruta especificada: {file_path}'
        
        # Verificar tama√±o del archivo
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            return 'warning', f'El archivo fue creado pero est√° vac√≠o: {file_path}'
        
        # Verificar que el tama√±o reportado coincida con el real
        reported_size = result.get('file_size', 0)
        if reported_size != file_size:
            return 'warning', f'Discrepancia en tama√±o de archivo: reportado {reported_size}, real {file_size}'
        
        # Validar contenido m√≠nimo
        if file_size < 50:  # Menos de 50 bytes es muy poco para ser √∫til
            return 'warning', f'El archivo es muy peque√±o ({file_size} bytes), puede tener contenido insuficiente.'
        
        # Verificar que tenga download_url
        if not result.get('download_url'):
            return 'warning', 'Archivo creado pero sin URL de descarga.'
        
        return 'success', f'Archivo creado y validado exitosamente: {result.get("file_name")} ({file_size} bytes)'
        
    except Exception as e:
        logger.error(f"Error validating file creation result: {str(e)}")
        return 'failure', f'Error en validaci√≥n de archivo: {str(e)}'

def validate_ollama_analysis_result(result: dict) -> Tuple[str, str]:
    """
    Valida el resultado de un an√°lisis de Ollama.
    
    Args:
        result: Resultado del an√°lisis de Ollama
    
    Returns:
        Tuple[str, str]: (estado, mensaje)
    """
    try:
        if not result or not isinstance(result, dict):
            return 'failure', 'Resultado de an√°lisis inv√°lido o nulo.'
        
        # Verificar que no haya errores expl√≠citos
        if result.get('error'):
            return 'failure', f'Error en an√°lisis: {result["error"]}'
        
        # CORREGIDO: Verificar tanto 'response' como 'content' (estructura real)
        content = result.get('response', '') or result.get('content', '')
        
        if not content:
            return 'failure', 'El an√°lisis no gener√≥ contenido real. Campo response y content est√°n vac√≠os.'
        
        # Verificar longitud m√≠nima de contenido
        if len(content.strip()) < 50:
            return 'failure', 'El an√°lisis generado es muy corto (menos de 50 caracteres). No constituye un an√°lisis real.'
        
        # Verificar que no sea solo texto gen√©rico o de error
        error_indicators = [
            'no puedo', 'cannot', 'unable to', 'error', 'problema',
            'disculpa', 'sorry', 'lo siento', 'no es posible', 'paso completado',
            'generic', 'gen√©rico', 'no hay informaci√≥n'
        ]
        
        content_lower = content.lower()
        error_count = sum(1 for indicator in error_indicators if indicator in content_lower)
        
        if error_count > 2:  # Demasiadas palabras de error
            return 'failure', 'El an√°lisis de Ollama indica errores, falta de capacidad o es demasiado gen√©rico.'
        
        # Verificar que no sea solo "Paso completado" u otro texto gen√©rico
        generic_phrases = ['paso completado', 'task completed', 'generic response', 'default response']
        if any(phrase in content_lower for phrase in generic_phrases):
            return 'failure', 'El an√°lisis es solo un mensaje gen√©rico, no contiene an√°lisis real.'
        
        # Verificar que tenga estructura de an√°lisis (p√°rrafos, puntos, etc.)
        has_structure = any([
            '\n\n' in content,  # P√°rrafos
            '1.' in content or '2.' in content,  # Listas numeradas
            '‚Ä¢' in content or '-' in content,  # Listas con vi√±etas
            '**' in content or '*' in content,  # Texto con formato
        ])
        
        if not has_structure and len(content) < 200:
            return 'warning', 'El an√°lisis parece carecer de estructura detallada.'
        
        return 'success', f'An√°lisis generado y validado exitosamente ({len(content)} caracteres).'
        
    except Exception as e:
        logger.error(f"Error validating Ollama analysis result: {str(e)}")
        return 'failure', f'Error en validaci√≥n de an√°lisis: {str(e)}'

def validate_planning_result(result: dict) -> Tuple[str, str]:
    """
    Valida el resultado de una planificaci√≥n.
    
    Args:
        result: Resultado de la planificaci√≥n
    
    Returns:
        Tuple[str, str]: (estado, mensaje)
    """
    try:
        if not result or not isinstance(result, dict):
            return 'failure', 'Resultado de planificaci√≥n inv√°lido o nulo.'
        
        # Verificar que no haya errores expl√≠citos
        if result.get('error'):
            return 'failure', f'Error en planificaci√≥n: {result["error"]}'
        
        content = result.get('response', '')
        if not content:
            return 'failure', 'La planificaci√≥n no gener√≥ contenido.'
        
        # Verificar longitud m√≠nima para un plan √∫til
        if len(content.strip()) < 100:
            return 'warning', 'El plan generado es muy corto (menos de 100 caracteres).'
        
        # Verificar elementos t√≠picos de un plan
        plan_indicators = [
            'objetivo', 'meta', 'paso', 'estrategia', 'cronograma',
            'recurso', 'timeline', 'plan', 'fase', 'etapa'
        ]
        
        content_lower = content.lower()
        plan_elements = sum(1 for indicator in plan_indicators if indicator in content_lower)
        
        if plan_elements < 2:
            return 'warning', 'El plan no parece contener elementos estructurales t√≠picos de planificaci√≥n.'
        
        return 'success', f'Plan generado y validado exitosamente ({len(content)} caracteres, {plan_elements} elementos de planificaci√≥n detectados).'
        
    except Exception as e:
        logger.error(f"Error validating planning result: {str(e)}")
        return 'failure', f'Error en validaci√≥n de planificaci√≥n: {str(e)}'

def validate_delivery_result(result: dict) -> Tuple[str, str]:
    """
    Valida el resultado de una entrega final.
    
    Args:
        result: Resultado de la entrega
    
    Returns:
        Tuple[str, str]: (estado, mensaje)
    """
    try:
        if not result or not isinstance(result, dict):
            return 'failure', 'Resultado de entrega inv√°lido o nulo.'
        
        # Para entregas, aplicar validaci√≥n de archivo si se cre√≥ uno
        if result.get('file_created', False):
            file_validation = validate_file_creation_result(result)
            if file_validation[0] == 'failure':
                return file_validation
        
        # Verificar que tenga resumen ejecutivo
        if not result.get('executive_summary', False):
            return 'warning', 'La entrega no incluye resumen ejecutivo marcado.'
        
        # Verificar contenido del resumen
        content = result.get('content', '')
        if len(content.strip()) < 200:
            return 'warning', 'El resumen ejecutivo es muy corto (menos de 200 caracteres).'
        
        # Verificar elementos de resumen ejecutivo
        executive_elements = [
            'resumen ejecutivo', 'objetivos', 'resultados', 'conclusiones',
            'deliverables', 'hallazgos', 'recomendaciones'
        ]
        
        content_lower = content.lower()
        executive_count = sum(1 for element in executive_elements if element in content_lower)
        
        if executive_count < 3:
            return 'warning', 'El resumen ejecutivo no parece tener estructura completa.'
        
        return 'success', f'Entrega final validada exitosamente con resumen ejecutivo completo.'
        
    except Exception as e:
        logger.error(f"Error validating delivery result: {str(e)}")
        return 'failure', f'Error en validaci√≥n de entrega: {str(e)}'

def validate_generic_processing_result(result: dict) -> Tuple[str, str]:
    """
    Valida el resultado de procesamiento gen√©rico.
    
    Args:
        result: Resultado del procesamiento gen√©rico
    
    Returns:
        Tuple[str, str]: (estado, mensaje)
    """
    try:
        if not result or not isinstance(result, dict):
            return 'failure', 'Resultado de procesamiento inv√°lido o nulo.'
        
        # Verificar que no haya errores expl√≠citos
        if result.get('error'):
            return 'failure', f'Error en procesamiento: {result["error"]}'
        
        content = result.get('response', '')
        if not content:
            return 'failure', 'El procesamiento no gener√≥ contenido.'
        
        # Para procesamiento gen√©rico, validar contenido m√≠nimo
        if len(content.strip()) < 30:
            return 'warning', 'El resultado del procesamiento es muy corto.'
        
        return 'success', f'Procesamiento gen√©rico completado exitosamente ({len(content)} caracteres).'
        
    except Exception as e:
        logger.error(f"Error validating generic processing result: {str(e)}")
        return 'failure', f'Error en validaci√≥n de procesamiento: {str(e)}'

# Mapeo de herramientas a sus validadores
RESULT_VALIDATORS = {
    'web_search': validate_web_search_result,
    'creation': validate_file_creation_result,
    'delivery': validate_delivery_result,
    'analysis': validate_ollama_analysis_result,
    'planning': validate_planning_result,
    'processing': validate_generic_processing_result,
    'synthesis': validate_ollama_analysis_result,  # Reutilizable
    'search_definition': validate_ollama_analysis_result,  # Reutilizable
    'data_analysis': validate_ollama_analysis_result,  # Reutilizable
    'generic': validate_generic_processing_result
}

def validate_step_result(tool_name: str, result: dict, original_query: str = "", step_title: str = "") -> Tuple[str, str]:
    """
    Valida el resultado de un paso usando el validador apropiado CON VALIDACI√ìN DE RELEVANCIA MEJORADA.
    
    Args:
        tool_name: Nombre de la herramienta/paso
        result: Resultado a validar
        original_query: Query original de la tarea (NUEVO - opcional para compatibilidad)
        step_title: T√≠tulo del paso (NUEVO - opcional para compatibilidad)
    
    Returns:
        Tuple[str, str]: (estado, mensaje) donde estado es 'success', 'warning', o 'failure'
    """
    try:
        # üöÄ VALIDACI√ìN ESPECIAL PARA WEB_SEARCH CON RELEVANCIA
        if tool_name == 'web_search' and original_query:
            return validate_web_search_result(result, original_query, step_title)
        elif tool_name == 'web_search':
            # Fallback sin query original
            return validate_web_search_result(result)
        
        # Para otras herramientas, usar validador espec√≠fico
        validator = RESULT_VALIDATORS.get(tool_name)
        if validator:
            return validator(result)
        else:
            # Fallback a validador gen√©rico
            logger.warning(f"No specific validator for tool '{tool_name}', using generic validator")
            return validate_generic_processing_result(result)
            
    except Exception as e:
        logger.error(f"Error in step result validation for tool '{tool_name}': {str(e)}")
        return 'failure', f'Error en validaci√≥n: {str(e)}'

# Definici√≥n de estados granulares
class StepStatus:
    PENDING = 'pending'
    IN_PROGRESS = 'in-progress'
    COMPLETED_SUCCESS = 'completed_success'
    COMPLETED_WITH_WARNINGS = 'completed_with_warnings'
    FAILED = 'failed'
    SKIPPED = 'skipped'

class TaskStatus:
    PLAN_GENERATED = 'plan_generated'
    EXECUTING = 'executing'
    COMPLETED_SUCCESS = 'completed_success'
    COMPLETED_WITH_WARNINGS = 'completed_with_warnings'
    FAILED = 'failed'

def determine_task_status_from_steps(steps: list) -> str:
    """
    Determina el estado final de la tarea basado en los estados de sus pasos.
    
    Args:
        steps: Lista de pasos con sus estados
    
    Returns:
        str: Estado final de la tarea
    """
    try:
        if not steps:
            return TaskStatus.FAILED
        
        step_statuses = [step.get('status', StepStatus.PENDING) for step in steps]
        
        # Si alg√∫n paso cr√≠tico fall√≥, la tarea fall√≥
        failed_steps = [s for s in step_statuses if s == StepStatus.FAILED]
        if failed_steps:
            return TaskStatus.FAILED
        
        # Si todos son exitosos, la tarea es exitosa
        success_steps = [s for s in step_statuses if s == StepStatus.COMPLETED_SUCCESS]
        warning_steps = [s for s in step_statuses if s == StepStatus.COMPLETED_WITH_WARNINGS]
        
        if len(success_steps) == len(steps):
            return TaskStatus.COMPLETED_SUCCESS
        
        if len(success_steps) + len(warning_steps) == len(steps):
            return TaskStatus.COMPLETED_WITH_WARNINGS
        
        # Si hay pasos pendientes o en progreso, la tarea est√° ejecut√°ndose
        pending_or_progress = [s for s in step_statuses if s in [StepStatus.PENDING, StepStatus.IN_PROGRESS]]
        if pending_or_progress:
            return TaskStatus.EXECUTING
        
        # Por defecto, si no encaja en otras categor√≠as
        return TaskStatus.COMPLETED_WITH_WARNINGS
        
    except Exception as e:
        logger.error(f"Error determining task status from steps: {str(e)}")
        return TaskStatus.FAILED
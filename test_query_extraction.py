#!/usr/bin/env python3
"""
üß™ SCRIPT DE TESTING PARA VERIFICAR LA EXTRACCI√ìN INTELIGENTE DE QUERIES

Prueba la funci√≥n mejorada de extracci√≥n de keywords para validar que
ahora genera queries inteligentes en lugar de "BUSCAR INFORMACI√ìN" gen√©ricos.
"""

import sys
import os

# Agregar el path del backend
sys.path.insert(0, '/app/backend/src')

from tools.unified_web_search_tool import UnifiedWebSearchTool

def test_query_extraction():
    """üß™ Test cases para verificar la extracci√≥n mejorada"""
    
    # Crear instancia de la herramienta
    web_search_tool = UnifiedWebSearchTool()
    
    # Casos de prueba que representan el problema original
    test_cases = [
        {
            'name': 'Problema Original - Selecci√≥n Argentina',
            'input': 'Buscar informaci√≥n sobre la selecci√≥n argentina de f√∫tbol 2025 jugadores convocados',
            'expected_keywords': ['selecci√≥n', 'argentina', 'f√∫tbol', 'jugadores', '2025']
        },
        {
            'name': 'Problema Original - Inflaci√≥n',
            'input': 'Investigar sobre la inflaci√≥n en Argentina durante el a√±o 2024',
            'expected_keywords': ['inflaci√≥n', 'argentina', '2025']
        },
        {
            'name': 'Problema Original - Tecnolog√≠a IA',
            'input': 'Obtener informaci√≥n espec√≠fica sobre inteligencia artificial y machine learning',
            'expected_keywords': ['inteligencia', 'artificial', 'machine', 'learning']
        },
        {
            'name': 'Query Gen√©rico Malo',
            'input': 'Buscar informaci√≥n sobre datos espec√≠ficos necesarios para completar',
            'expected_keywords': ['noticias', 'actualidad', '2025']  # Deber√≠a usar fallback
        },
        {
            'name': 'Nombres Propios',
            'input': 'Investigar sobre Lionel Messi y el Inter Miami en 2025',
            'expected_keywords': ['lionel', 'messi', 'inter', 'miami', '2025']
        }
    ]
    
    print("üß™ TESTING EXTRACCI√ìN INTELIGENTE DE QUERIES")
    print("=" * 60)
    print()
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"Test {i}: {test_case['name']}")
        print(f"  üìù Input Original: '{test_case['input']}'")
        
        # Extraer query inteligente
        smart_query = web_search_tool._extract_clean_keywords_static(test_case['input'])
        
        print(f"  üéØ Query Inteligente: '{smart_query}'")
        print(f"  üìã Keywords Esperados: {test_case['expected_keywords']}")
        
        # Analizar si mejora significativamente
        original_words = test_case['input'].lower().split()
        smart_words = smart_query.lower().split()
        
        # Verificar que elimin√≥ palabras gen√©ricas
        generic_removed = not any(word in smart_query.lower() for word in ['buscar', 'informaci√≥n', 'sobre', 'investigar', 'obtener', 'espec√≠fica'])
        
        # Verificar que contiene algunos keywords esperados
        found_keywords = []
        for keyword in test_case['expected_keywords']:
            if keyword.lower() in smart_query.lower():
                found_keywords.append(keyword)
        
        print(f"  ‚úÖ Elimin√≥ palabras gen√©ricas: {generic_removed}")
        print(f"  üìä Keywords encontrados: {found_keywords} ({len(found_keywords)}/{len(test_case['expected_keywords'])})")
        
        # Evaluar mejora
        if len(smart_query) < len(test_case['input']) * 0.7 and generic_removed:
            print(f"  üéâ MEJORADO: Query m√°s espec√≠fico y sin palabras gen√©ricas")
        else:
            print(f"  ‚ö†Ô∏è  REVISAR: Posible mejora adicional necesaria")
        
        print()

def compare_before_after():
    """üîÑ Comparar m√©todo anterior vs nuevo"""
    
    print("\nüîÑ COMPARACI√ìN M√âTODO ANTERIOR vs NUEVO")
    print("=" * 60)
    
    test_queries = [
        "Buscar informaci√≥n sobre la selecci√≥n argentina 2025",
        "Investigar sobre inteligencia artificial",
        "Obtener datos espec√≠ficos sobre la inflaci√≥n en Argentina"
    ]
    
    web_search_tool = UnifiedWebSearchTool()
    
    for query in test_queries:
        print(f"\nüìù Query Original: '{query}'")
        
        # M√©todo anterior (simulado)
        old_method = query.replace('Buscar informaci√≥n sobre:', '').replace('Investigar:', '').strip()
        print(f"   üóëÔ∏è  M√©todo Anterior: '{old_method}'")
        
        # Nuevo m√©todo inteligente
        new_method = web_search_tool._extract_clean_keywords_static(query)
        print(f"   üß† M√©todo Nuevo: '{new_method}'")
        
        # Evaluar mejora
        if len(new_method) < len(old_method) and 'informaci√≥n' not in new_method:
            print("   ‚úÖ MEJORA: M√°s espec√≠fico y limpio")
        else:
            print("   ‚ö†Ô∏è  Revisar: Posible mejora adicional")

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTS DE EXTRACCI√ìN DE QUERIES...")
    print()
    
    try:
        test_query_extraction()
        compare_before_after()
        
        print("\n" + "="*60)
        print("‚úÖ TESTS COMPLETADOS")
        print("üéØ Si ves mejoras en la especificidad y eliminaci√≥n de palabras gen√©ricas,")
        print("   la implementaci√≥n est√° funcionando correctamente.")
        
    except Exception as e:
        print(f"‚ùå Error durante testing: {str(e)}")
        import traceback
        traceback.print_exc()
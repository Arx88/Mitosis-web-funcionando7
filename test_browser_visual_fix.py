#!/usr/bin/env python3
"""
üß™ TEST DE NAVEGACI√ìN VISUAL - VERIFICAR CORRECCI√ìN DE BROWSER_VISUAL EVENTS
Prueba espec√≠fica para validar que los eventos browser_visual se emiten correctamente
"""

import requests
import time
import json
from datetime import datetime

def test_browser_visual_functionality():
    """Test espec√≠fico para eventos browser_visual"""
    
    print("üß™ INICIANDO TEST DE NAVEGACI√ìN VISUAL...")
    print("=" * 60)
    
    # Crear task_id √∫nico para el test
    test_task_id = f"test-browser-visual-fix-{int(time.time())}"
    print(f"üìã Test Task ID: {test_task_id}")
    
    # Preparar datos para b√∫squeda web que deber√≠a generar eventos browser_visual
    search_data = {
        "message": "busca informaci√≥n sobre Python programming 2025",
        "task_id": test_task_id
    }
    
    print(f"üîç Enviando b√∫squeda web para generar eventos browser_visual...")
    print(f"   Query: {search_data['message']}")
    print(f"   Task ID: {search_data['task_id']}")
    
    try:
        # Realizar petici√≥n de b√∫squeda
        response = requests.post(
            'http://localhost:8001/api/agent/chat',
            json=search_data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Petici√≥n enviada exitosamente")
            print(f"   Response task_id: {result.get('task_id')}")
            print(f"   Plan steps: {len(result.get('plan', []))}")
            
            # Esperar un momento para que se procese
            print(f"‚è≥ Esperando 10 segundos para procesamiento...")
            time.sleep(10)
            
            # Verificar logs de WebSocket para eventos browser_visual
            print(f"üîç Verificando logs de WebSocket...")
            
            try:
                with open('/tmp/websocket_debug.log', 'r') as f:
                    logs = f.read()
                    
                # Buscar evidencia de eventos browser_visual en logs
                visual_events_found = 0
                for line in logs.split('\n'):
                    if test_task_id in line and ('browser_visual' in line.lower() or 'navegaci√≥n visual' in line.lower()):
                        visual_events_found += 1
                        print(f"   üì∏ BROWSER_VISUAL event encontrado: {line.strip()}")
                
                if visual_events_found > 0:
                    print(f"‚úÖ BROWSER_VISUAL EVENTS DETECTADOS: {visual_events_found} eventos encontrados")
                    print(f"‚úÖ CORRECCI√ìN EXITOSA: Los eventos browser_visual se est√°n generando")
                    return True
                else:
                    print(f"‚ùå NO SE ENCONTRARON EVENTOS BROWSER_VISUAL")
                    print(f"‚ö†Ô∏è Los eventos pueden estar funcionando pero no aparecer en logs")
                    
                    # Verificar si al menos hay actividad de b√∫squeda web
                    search_activity = sum(1 for line in logs.split('\n') if test_task_id in line and 'WEB SEARCH' in line)
                    if search_activity > 0:
                        print(f"‚úÖ B√öSQUEDA WEB ACTIVA: {search_activity} eventos de b√∫squeda detectados")
                        print(f"‚ö†Ô∏è La funcionalidad base funciona, puede ser problema de logging de browser_visual")
                        return False
                    else:
                        print(f"‚ùå NO HAY ACTIVIDAD DE B√öSQUEDA WEB DETECTADA")
                        return False
                        
            except FileNotFoundError:
                print(f"‚ö†Ô∏è Archivo de log no encontrado: /tmp/websocket_debug.log")
                return False
                
        else:
            print(f"‚ùå Error en petici√≥n: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante test: {str(e)}")
        return False

def verify_websocket_functionality():
    """Verificar que WebSocket est√© funcionando"""
    print(f"\nüîå VERIFICANDO FUNCIONALIDAD WEBSOCKET...")
    
    try:
        # Test b√°sico de health endpoint
        response = requests.get('http://localhost:8001/api/health', timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ Backend funcionando: {health_data}")
            return True
        else:
            print(f"‚ùå Backend no responde correctamente: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error verificando backend: {str(e)}")
        return False

if __name__ == "__main__":
    print(f"üß™ TEST DE CORRECCI√ìN BROWSER_VISUAL")
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Objetivo: Verificar que eventos browser_visual funcionen correctamente")
    print()
    
    # Verificar que el backend est√© funcionando
    if not verify_websocket_functionality():
        print(f"‚ùå Backend no est√° funcionando correctamente")
        exit(1)
    
    # Ejecutar test principal
    success = test_browser_visual_functionality()
    
    print()
    print("=" * 60)
    if success:
        print(f"‚úÖ TEST EXITOSO: Los eventos browser_visual est√°n funcionando")
        print(f"üéâ CORRECCI√ìN CONFIRMADA: La navegaci√≥n visual en tiempo real funciona")
    else:
        print(f"‚ùå TEST FALLIDO: Los eventos browser_visual necesitan m√°s correcci√≥n")
        print(f"üîß PR√ìXIMOS PASOS: Revisar la implementaci√≥n del WebSocket en _emit_browser_visual")
    
    print(f"üìù Log completo disponible en: /tmp/websocket_debug.log")
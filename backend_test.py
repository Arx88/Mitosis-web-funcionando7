#!/usr/bin/env python3
"""
BACKEND TESTING SUITE FOR MITOSIS AGENT BEHAVIOR ANALYSIS
Testing the complete behavior of the Mitosis agent to identify problems with web searches:

TESTING FOCUS:
1. PLAN GENERATION: Monitor plan generated by the agent
2. WEB SEARCH KEYWORDS: Analyze keywords used in web searches
3. SOURCE DIVERSITY: Count number of sources visited
4. INFORMATION QUALITY: Evaluate quality of information extracted
5. VALIDATION BEHAVIOR: Monitor validation process
6. COMPLETE TASK EXECUTION: Full workflow analysis

Expected Result: Comprehensive analysis of agent behavior to identify web search problems.
"""

import requests
import json
import time
import sys
from datetime import datetime
import threading
import re
import subprocess

# Configuration
BACKEND_URL = "https://4770b6f3-4aed-43f9-992c-606af0bc00d7.preview.emergentagent.com"

class EnhancedStepValidationTester:
    def __init__(self):
        self.backend_url = BACKEND_URL
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        self.test_results = []
        self.created_task_id = None
        self.validation_logs = []
        self.enhanced_validator_calls = []
        self.political_research_detected = False
        self.strict_validation_applied = False
        
    def log_test(self, test_name, success, details, error=None):
        """Log test results"""
        result = {
            'test': test_name,
            'success': success,
            'details': details,
            'error': str(error) if error else None,
            'timestamp': datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if details:
            print(f"   Details: {details}")
        if error:
            print(f"   Error: {error}")
        print()

    def monitor_enhanced_validation_logs(self, duration=120):
        """Monitor backend logs for enhanced step validation activity"""
        try:
            print(f"üîç Monitoring backend logs for enhanced validation for {duration} seconds...")
            
            # Monitor supervisor logs for enhanced validation
            cmd = f"tail -f /var/log/supervisor/backend.out.log | grep -E 'DETECTADO PASO 1 DE INVESTIGACI√ìN|VALIDACI√ìN SUPER ESTRICTA|enhanced_step_validator|biograf√≠a.*trayectoria.*pol√≠tica|validate_step_1_with_enhanced_validator|EnhancedStepValidator|PASO 1 APROBADO|PASO 1 RECHAZADO' | head -30"
            
            process = subprocess.Popen(
                cmd, 
                shell=True, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE, 
                text=True
            )
            
            start_time = time.time()
            validation_events = []
            
            while time.time() - start_time < duration:
                try:
                    # Check if process has output
                    output = process.stdout.readline()
                    if output:
                        output = output.strip()
                        validation_events.append(output)
                        print(f"   üìã LOG: {output}")
                        
                        # Extract enhanced validator usage
                        if "DETECTADO PASO 1 DE INVESTIGACI√ìN" in output:
                            self.political_research_detected = True
                            print(f"   üéØ POLITICAL RESEARCH DETECTED")
                        
                        if "VALIDACI√ìN SUPER ESTRICTA" in output:
                            self.strict_validation_applied = True
                            print(f"   üî• STRICT VALIDATION APPLIED")
                        
                        if "enhanced_step_validator" in output or "EnhancedStepValidator" in output:
                            self.enhanced_validator_calls.append(output)
                            print(f"   üõ°Ô∏è ENHANCED VALIDATOR CALL: {len(self.enhanced_validator_calls)} calls")
                        
                        if "PASO 1 APROBADO" in output or "PASO 1 RECHAZADO" in output:
                            self.validation_logs.append(output)
                            print(f"   üìä VALIDATION RESULT: {len(self.validation_logs)} results")
                    
                    time.sleep(0.5)
                    
                except Exception as e:
                    break
            
            process.terminate()
            
            return validation_events
            
        except Exception as e:
            print(f"   ‚ùå Error monitoring enhanced validation logs: {e}")
            return []

    def test_1_backend_health(self):
        """Test 1: Backend Health Check"""
        try:
            print("üîÑ Test 1: Checking backend health endpoints")
            
            # Test /api/health
            url = f"{self.backend_url}/api/health"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                services = data.get('services', {})
                database = services.get('database', False)
                ollama = services.get('ollama', False)
                tools = services.get('tools', 0)
                
                details = f"Database: {database}, Ollama: {ollama}, Tools: {tools}"
                self.log_test("1. Backend Health Check", True, details)
                return True
            else:
                self.log_test("1. Backend Health Check", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("1. Backend Health Check", False, "Request failed", e)
            return False

    def test_2_create_political_research_task(self):
        """Test 2: Create Political Research Task - Should Trigger Enhanced Validation"""
        try:
            print("üîÑ Test 2: Creating political research task to trigger enhanced validation")
            
            url = f"{self.backend_url}/api/agent/chat"
            payload = {
                "message": "Realizar b√∫squedas en fuentes confiables sobre biograf√≠a, trayectoria pol√≠tica, ideolog√≠a y declaraciones p√∫blicas de Javier Milei",
                "task_id": f"test-enhanced-validation-{int(time.time())}"
            }
            
            response = self.session.post(url, json=payload, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                task_id = data.get('task_id') or payload['task_id']
                
                if task_id:
                    self.created_task_id = task_id
                    details = f"Political research task created successfully: {task_id}"
                    self.log_test("2. Create Political Research Task", True, details)
                    return task_id
                else:
                    self.log_test("2. Create Political Research Task", False, f"No task_id in response: {data}")
                    return None
            else:
                self.log_test("2. Create Political Research Task", False, f"HTTP {response.status_code}: {response.text}")
                return None
                
        except Exception as e:
            self.log_test("2. Create Political Research Task", False, "Request failed", e)
            return None

    def test_3_monitor_enhanced_validation(self):
        """Test 3: Monitor Enhanced Step Validation System"""
        try:
            print("üîÑ Test 3: Monitoring enhanced step validation system activation")
            
            if not self.created_task_id:
                self.log_test("3. Enhanced Validation Monitoring", False, "No task_id available")
                return False
            
            print(f"   üìã Monitoring enhanced validation for task: {self.created_task_id}")
            
            # Start enhanced validation monitoring in background
            log_thread = threading.Thread(
                target=self.monitor_enhanced_validation_logs, 
                args=(120,),  # Monitor for 120 seconds
                daemon=True
            )
            log_thread.start()
            
            # Wait for validation activity
            time.sleep(125)  # Wait for monitoring to complete
            
            # Analyze results
            validator_calls = len(self.enhanced_validator_calls)
            validation_results = len(self.validation_logs)
            
            if self.political_research_detected and self.strict_validation_applied and validator_calls > 0:
                details = f"SUCCESS: Political research detected, strict validation applied, {validator_calls} validator calls"
                self.log_test("3. Enhanced Validation Monitoring", True, details)
                return True
            elif validator_calls > 0:
                details = f"PARTIAL: {validator_calls} validator calls, but detection may be incomplete"
                self.log_test("3. Enhanced Validation Monitoring", True, details)
                return True
            else:
                details = f"FAIL: No enhanced validator calls detected. Political research: {self.political_research_detected}, Strict validation: {self.strict_validation_applied}"
                self.log_test("3. Enhanced Validation Monitoring", False, details)
                return False
                
        except Exception as e:
            self.log_test("3. Enhanced Validation Monitoring", False, "Request failed", e)
            return False

    def test_4_verify_strict_criteria_application(self):
        """Test 4: Verify Strict Criteria Application (3+ sources, 2000+ chars, anti-meta-content)"""
        try:
            print("üîÑ Test 4: Verifying strict criteria application")
            
            if not self.created_task_id:
                self.log_test("4. Strict Criteria Application", False, "No task_id available")
                return False
            
            # Get task results to analyze validation
            url = f"{self.backend_url}/api/agent/get-task-status/{self.created_task_id}"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                task_data = data
                
                # Extract content from task results
                content_sources = []
                unique_sources = set()
                total_content_length = 0
                
                if 'plan' in task_data:
                    for step in task_data.get('plan', []):
                        if 'result' in step:
                            result = step.get('result', {})
                            content = str(result.get('content', '')) or str(result.get('summary', ''))
                            if content and len(content) > 100:
                                content_sources.append(content)
                                total_content_length += len(content)
                            
                            # Check for sources in web search results
                            if 'data' in result and isinstance(result['data'], list):
                                for item in result['data']:
                                    url = item.get('url', '')
                                    if url and url.startswith('http'):
                                        try:
                                            from urllib.parse import urlparse
                                            domain = urlparse(url).netloc
                                            if domain:
                                                unique_sources.add(domain)
                                        except:
                                            pass
                
                # Check strict criteria
                sources_count = len(unique_sources)
                meets_source_requirement = sources_count >= 3
                meets_content_requirement = total_content_length >= 2000
                
                # Check for meta-content (should be rejected)
                all_content = " ".join(content_sources)
                meta_phrases = ["se realizar√°", "se analizar√°", "el presente estudio", "se proceder√°"]
                meta_content_detected = any(phrase in all_content.lower() for phrase in meta_phrases)
                
                criteria_met = {
                    'sources_count': sources_count,
                    'content_length': total_content_length,
                    'meets_source_requirement': meets_source_requirement,
                    'meets_content_requirement': meets_content_requirement,
                    'no_meta_content': not meta_content_detected
                }
                
                if meets_source_requirement and meets_content_requirement and not meta_content_detected:
                    details = f"SUCCESS: All strict criteria met - {sources_count} sources, {total_content_length} chars, no meta-content"
                    self.log_test("4. Strict Criteria Application", True, details)
                    return True
                elif meets_source_requirement or meets_content_requirement:
                    details = f"PARTIAL: Some criteria met - {sources_count} sources, {total_content_length} chars, meta-content: {meta_content_detected}"
                    self.log_test("4. Strict Criteria Application", True, details)
                    return True
                else:
                    details = f"FAIL: Strict criteria not met - {sources_count} sources, {total_content_length} chars, meta-content: {meta_content_detected}"
                    self.log_test("4. Strict Criteria Application", False, details)
                    return False
            else:
                self.log_test("4. Strict Criteria Application", False, f"Could not get task status: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("4. Strict Criteria Application", False, "Request failed", e)
            return False

    def test_5_verify_pattern_detection(self):
        """Test 5: Verify Critical Pattern Detection (biograf√≠a, trayectoria pol√≠tica, ideolog√≠a)"""
        try:
            print("üîÑ Test 5: Verifying critical pattern detection for political research")
            
            if not self.created_task_id:
                self.log_test("5. Pattern Detection", False, "No task_id available")
                return False
            
            # Get task results to analyze patterns
            url = f"{self.backend_url}/api/agent/get-task-status/{self.created_task_id}"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                task_data = data
                
                # Extract all content
                all_content = ""
                if 'plan' in task_data:
                    for step in task_data.get('plan', []):
                        if 'result' in step:
                            result = step.get('result', {})
                            content = str(result.get('content', '')) or str(result.get('summary', ''))
                            all_content += f" {content}"
                
                # Check for critical patterns
                critical_patterns = {
                    'biografia_personal': ['naci√≥', 'nacimiento', 'edad', 'formaci√≥n', 'universidad', 'estudios'],
                    'trayectoria_politica': ['cargo pol√≠tico', 'diputado', 'senador', 'ministro', 'presidente', 'candidato', 'elecci√≥n'],
                    'ideologia_especifica': ['liberal', 'conservador', 'libertario', 'derecha', 'izquierda', 'ideol√≥gica'],
                    'declaraciones_recientes': ['declar√≥', 'afirm√≥', 'manifest√≥', 'entrevista', 'rueda de prensa', 'discurso']
                }
                
                patterns_found = {}
                for category, patterns in critical_patterns.items():
                    found_patterns = [p for p in patterns if p in all_content.lower()]
                    patterns_found[category] = found_patterns
                
                total_patterns = sum(len(patterns) for patterns in patterns_found.values())
                categories_with_patterns = sum(1 for patterns in patterns_found.values() if len(patterns) > 0)
                
                if categories_with_patterns >= 3 and total_patterns >= 5:
                    details = f"SUCCESS: {categories_with_patterns} categories, {total_patterns} patterns found: {patterns_found}"
                    self.log_test("5. Pattern Detection", True, details)
                    return True
                elif categories_with_patterns >= 2:
                    details = f"PARTIAL: {categories_with_patterns} categories, {total_patterns} patterns found"
                    self.log_test("5. Pattern Detection", True, details)
                    return True
                else:
                    details = f"FAIL: Only {categories_with_patterns} categories, {total_patterns} patterns found"
                    self.log_test("5. Pattern Detection", False, details)
                    return False
            else:
                self.log_test("5. Pattern Detection", False, f"Could not get task status: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("5. Pattern Detection", False, "Request failed", e)
            return False

    def test_6_verify_integration_flow(self):
        """Test 6: Verify Integration Flow (agent_routes.py ‚Üí enhanced_step_validator.py)"""
        try:
            print("üîÑ Test 6: Verifying integration flow between agent_routes and enhanced validator")
            
            validator_calls = len(self.enhanced_validator_calls)
            validation_results = len(self.validation_logs)
            
            # Check if the integration flow worked
            integration_working = (
                self.political_research_detected and  # Detection in agent_routes
                self.strict_validation_applied and   # Strict validation triggered
                validator_calls > 0                  # Enhanced validator called
            )
            
            if integration_working:
                details = f"SUCCESS: Integration flow working - Detection: {self.political_research_detected}, Strict validation: {self.strict_validation_applied}, Validator calls: {validator_calls}"
                self.log_test("6. Integration Flow", True, details)
                return True
            elif validator_calls > 0:
                details = f"PARTIAL: Some integration working - Validator calls: {validator_calls}, but detection may be incomplete"
                self.log_test("6. Integration Flow", True, details)
                return True
            else:
                details = f"FAIL: Integration not working - Detection: {self.political_research_detected}, Strict validation: {self.strict_validation_applied}, Validator calls: {validator_calls}"
                self.log_test("6. Integration Flow", False, details)
                return False
                
        except Exception as e:
            self.log_test("6. Integration Flow", False, "Request failed", e)
            return False

    def run_enhanced_validation_tests(self):
        """Run comprehensive enhanced step validation tests"""
        print("üöÄ ENHANCED STEP VALIDATION SYSTEM TESTING")
        print("=" * 80)
        print(f"Backend URL: {self.backend_url}")
        print(f"Test Time: {datetime.now().isoformat()}")
        print(f"Test Task: Political research task with biograf√≠a, trayectoria pol√≠tica, ideolog√≠a")
        print(f"FOCUS: Verify enhanced step validation system for Paso 1")
        print()
        
        # Test 1: Backend Health
        print("=" * 60)
        health_ok = self.test_1_backend_health()
        if not health_ok:
            print("‚ùå Backend health check failed. Aborting tests.")
            return self.test_results
        
        # Test 2: Create Political Research Task
        print("=" * 60)
        task_id = self.test_2_create_political_research_task()
        if not task_id:
            print("‚ùå Failed to create political research task. Aborting remaining tests.")
            self.print_summary()
            return self.test_results
        
        # Wait a moment for task to be saved
        print("‚è≥ Waiting 10 seconds for task to be saved and processing to start...")
        time.sleep(10)
        
        # Test 3: Monitor Enhanced Validation (CRITICAL)
        print("=" * 60)
        validation_ok = self.test_3_monitor_enhanced_validation()
        
        # Test 4: Strict Criteria Application
        print("=" * 60)
        criteria_ok = self.test_4_verify_strict_criteria_application()
        
        # Test 5: Pattern Detection
        print("=" * 60)
        patterns_ok = self.test_5_verify_pattern_detection()
        
        # Test 6: Integration Flow
        print("=" * 60)
        integration_ok = self.test_6_verify_integration_flow()
        
        # Summary
        self.print_summary()
        
        return self.test_results

    def print_summary(self):
        """Print test summary"""
        print("\n" + "=" * 80)
        print("üéØ ENHANCED STEP VALIDATION SYSTEM TEST SUMMARY")
        print("=" * 80)
        
        passed = sum(1 for result in self.test_results if result['success'])
        total = len(self.test_results)
        
        print(f"Tests Passed: {passed}/{total}")
        print()
        
        # Analyze results for the enhanced validation system
        critical_issues = []
        enhanced_validator_working = False
        automatic_detection_working = False
        strict_criteria_applied = False
        pattern_detection_working = False
        integration_working = False
        
        for result in self.test_results:
            if not result['success']:
                test_name = result['test']
                details = result['details'] or result['error']
                
                if 'Enhanced Validation' in test_name:
                    critical_issues.append(f"üö® CRITICAL: {test_name} - {details}")
                elif 'Strict Criteria' in test_name:
                    critical_issues.append(f"üö® CRITICAL: {test_name} - {details}")
                elif 'Pattern Detection' in test_name:
                    critical_issues.append(f"‚ö†Ô∏è MAJOR: {test_name} - {details}")
                elif 'Integration Flow' in test_name:
                    critical_issues.append(f"‚ö†Ô∏è MAJOR: {test_name} - {details}")
                else:
                    critical_issues.append(f"‚ùå {test_name} - {details}")
            else:
                # Check for positive results
                if 'Enhanced Validation' in result['test']:
                    enhanced_validator_working = True
                    if self.political_research_detected:
                        automatic_detection_working = True
                if 'Strict Criteria' in result['test']:
                    strict_criteria_applied = True
                if 'Pattern Detection' in result['test']:
                    pattern_detection_working = True
                if 'Integration Flow' in result['test']:
                    integration_working = True
        
        if critical_issues:
            print("üö® ISSUES FOUND:")
            for issue in critical_issues:
                print(f"  {issue}")
        else:
            print("‚úÖ All enhanced step validation tests passed successfully")
        
        print()
        
        # Specific diagnosis for the enhanced validation system
        print("üîç ENHANCED STEP VALIDATION SYSTEM ANALYSIS:")
        
        if enhanced_validator_working:
            print("‚úÖ ENHANCED STEP VALIDATOR: WORKING")
            print(f"   - Enhanced validator calls: {len(self.enhanced_validator_calls)}")
            print(f"   - Validation results: {len(self.validation_logs)}")
        else:
            print("‚ùå ENHANCED STEP VALIDATOR: NOT WORKING")
            print("   - Enhanced validator not being called correctly")
        
        if automatic_detection_working:
            print("‚úÖ AUTOMATIC DETECTION: WORKING")
            print("   - Political research patterns detected automatically")
            print("   - System correctly identifies Paso 1 research tasks")
        else:
            print("‚ùå AUTOMATIC DETECTION: NOT WORKING")
            print("   - Political research patterns not detected")
        
        if strict_criteria_applied:
            print("‚úÖ STRICT CRITERIA: WORKING")
            print("   - Minimum 3 sources requirement applied")
            print("   - 2000+ character requirement applied")
            print("   - Anti-meta-content detection working")
        else:
            print("‚ùå STRICT CRITERIA: NOT WORKING")
            print("   - Strict validation criteria not properly applied")
        
        if pattern_detection_working:
            print("‚úÖ PATTERN DETECTION: WORKING")
            print("   - Critical patterns (biograf√≠a, trayectoria pol√≠tica, ideolog√≠a) detected")
        else:
            print("‚ùå PATTERN DETECTION: NOT WORKING")
            print("   - Critical patterns not properly detected")
        
        if integration_working:
            print("‚úÖ INTEGRATION FLOW: WORKING")
            print("   - agent_routes.py ‚Üí enhanced_step_validator.py integration working")
        else:
            print("‚ùå INTEGRATION FLOW: NOT WORKING")
            print("   - Integration between components not working properly")
        
        print()
        
        # Overall assessment
        if enhanced_validator_working and automatic_detection_working and strict_criteria_applied:
            print("üéâ OVERALL ASSESSMENT: ‚úÖ ENHANCED STEP VALIDATION SYSTEM SUCCESSFUL")
            print("   - Enhanced validator functioning correctly")
            print("   - Automatic detection of political research working")
            print("   - Strict criteria properly applied")
            print("   - Pattern detection working")
            print("   - Integration flow functional")
        else:
            print("‚ö†Ô∏è OVERALL ASSESSMENT: ‚ùå ENHANCED STEP VALIDATION SYSTEM NEEDS WORK")
            print("   - The enhanced validation system has issues")
            print("   - May need additional debugging and fixes")
        
        print()
        
        # Specific recommendations
        print("üìã RECOMMENDATIONS:")
        if not enhanced_validator_working:
            print("   1. Check enhanced_step_validator.py implementation")
            print("   2. Verify EnhancedStepValidator class is working correctly")
            print("   3. Test validate_step_1_with_enhanced_validator function")
        
        if not automatic_detection_working:
            print("   1. Check agent_routes.py detection logic for political research patterns")
            print("   2. Verify keywords: 'biograf√≠a', 'trayectoria pol√≠tica', 'ideolog√≠a', 'declaraciones p√∫blicas'")
            print("   3. Test is_step_1_research detection")
        
        if not strict_criteria_applied:
            print("   1. Verify minimum 3 sources requirement implementation")
            print("   2. Check 2000+ character requirement")
            print("   3. Test anti-meta-content detection patterns")
        
        if not pattern_detection_working:
            print("   1. Check critical_patterns in EnhancedStepValidator")
            print("   2. Verify pattern matching for biograf√≠a, trayectoria pol√≠tica, ideolog√≠a")
            print("   3. Test pattern scoring system")
        
        if not integration_working:
            print("   1. Check import of enhanced_step_validator in agent_routes.py")
            print("   2. Verify validate_step_1_with_enhanced_validator is called correctly")
            print("   3. Test flow from detection to validation")
        
        if enhanced_validator_working and automatic_detection_working and strict_criteria_applied:
            print("   1. Enhanced step validation system is working correctly")
            print("   2. Monitor for any regression issues")
            print("   3. Consider expanding to other step types")
        
        print()
        print("üìä ENHANCED STEP VALIDATION SYSTEM TESTING COMPLETE")
        
        if self.created_task_id:
            print(f"üìù Test Task ID: {self.created_task_id}")
            print("   Use this ID to check logs and debug if needed")
        
        print(f"üìã Enhanced Validator Calls: {len(self.enhanced_validator_calls)}")
        print(f"üéØ Political Research Detected: {self.political_research_detected}")
        print(f"üî• Strict Validation Applied: {self.strict_validation_applied}")
        print(f"üìä Validation Results: {len(self.validation_logs)}")

if __name__ == "__main__":
    tester = EnhancedStepValidationTester()
    results = tester.run_enhanced_validation_tests()
    
    # Exit with appropriate code
    failed_tests = sum(1 for result in results if not result['success'])
    sys.exit(failed_tests)
#!/usr/bin/env python3
"""
BACKEND TESTING SUITE FOR MITOSIS AGENT BEHAVIOR ANALYSIS
Testing the complete behavior of the Mitosis agent to identify problems with web searches:

TESTING FOCUS:
1. PLAN GENERATION: Monitor plan generated by the agent
2. WEB SEARCH KEYWORDS: Analyze keywords used in web searches
3. SOURCE DIVERSITY: Count number of sources visited
4. INFORMATION QUALITY: Evaluate quality of information extracted
5. VALIDATION BEHAVIOR: Monitor validation process
6. COMPLETE TASK EXECUTION: Full workflow analysis

Expected Result: Comprehensive analysis of agent behavior to identify web search problems.
"""

import requests
import json
import time
import sys
from datetime import datetime
import threading
import re
import subprocess

# Configuration
BACKEND_URL = "https://f89637ed-44f1-4cf4-a2d8-500a1734778c.preview.emergentagent.com"

class MitosisAgentBehaviorTester:
    def __init__(self):
        self.backend_url = BACKEND_URL
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        self.test_results = []
        self.created_task_id = None
        self.plan_generated = None
        self.web_search_keywords = []
        self.sources_visited = []
        self.information_extracted = []
        self.validation_events = []
        self.task_completion_status = None
        self.backend_logs = []
        
    def log_test(self, test_name, success, details, error=None):
        """Log test results"""
        result = {
            'test': test_name,
            'success': success,
            'details': details,
            'error': str(error) if error else None,
            'timestamp': datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if details:
            print(f"   Details: {details}")
        if error:
            print(f"   Error: {error}")
        print()

    def monitor_agent_behavior_logs(self, duration=180):
        """Monitor backend logs for agent behavior analysis"""
        try:
            print(f"üîç Monitoring backend logs for agent behavior for {duration} seconds...")
            
            # Monitor supervisor logs for web search keywords, sources, and validation
            cmd = f"tail -f /var/log/supervisor/backend.out.log | grep -E 'web_search|keyword|search|source|validation|plan|step|Argentina|econ√≥mica|inflaci√≥n|REALIZA INFORME' | head -50"
            
            process = subprocess.Popen(
                cmd, 
                shell=True, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE, 
                text=True
            )
            
            start_time = time.time()
            behavior_events = []
            
            while time.time() - start_time < duration:
                try:
                    # Check if process has output
                    output = process.stdout.readline()
                    if output:
                        output = output.strip()
                        behavior_events.append(output)
                        self.backend_logs.append(output)
                        print(f"   üìã LOG: {output}")
                        
                        # Extract web search keywords
                        if "keyword" in output.lower() or "search" in output.lower():
                            # Look for problematic keywords like "REALIZA INFORME"
                            if "REALIZA INFORME" in output:
                                self.web_search_keywords.append("REALIZA INFORME (PROBLEMATIC)")
                                print(f"   üö® PROBLEMATIC KEYWORD DETECTED: REALIZA INFORME")
                            else:
                                # Extract actual keywords
                                keyword_match = re.search(r'keyword[s]?[:\s]+([^,\n]+)', output, re.IGNORECASE)
                                if keyword_match:
                                    keyword = keyword_match.group(1).strip()
                                    self.web_search_keywords.append(keyword)
                                    print(f"   üîç KEYWORD EXTRACTED: {keyword}")
                        
                        # Extract sources visited
                        if "source" in output.lower() or "url" in output.lower():
                            url_match = re.search(r'https?://[^\s]+', output)
                            if url_match:
                                url = url_match.group(0)
                                self.sources_visited.append(url)
                                print(f"   üåê SOURCE VISITED: {url}")
                        
                        # Extract validation events
                        if "validation" in output.lower() or "validate" in output.lower():
                            self.validation_events.append(output)
                            print(f"   ‚úÖ VALIDATION EVENT: {len(self.validation_events)} events")
                    
                    time.sleep(0.5)
                    
                except Exception as e:
                    break
            
            process.terminate()
            
            return behavior_events
            
        except Exception as e:
            print(f"   ‚ùå Error monitoring agent behavior logs: {e}")
            return []

    def test_1_backend_health(self):
        """Test 1: Backend Health Check"""
        try:
            print("üîÑ Test 1: Checking backend health endpoints")
            
            # Test /api/health
            url = f"{self.backend_url}/api/health"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                services = data.get('services', {})
                database = services.get('database', False)
                ollama = services.get('ollama', False)
                tools = services.get('tools', 0)
                
                details = f"Database: {database}, Ollama: {ollama}, Tools: {tools}"
                self.log_test("1. Backend Health Check", True, details)
                return True
            else:
                self.log_test("1. Backend Health Check", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("1. Backend Health Check", False, "Request failed", e)
            return False

    def test_2_create_economic_analysis_task(self):
        """Test 2: Create Economic Analysis Task - The specific task requested"""
        try:
            print("üîÑ Test 2: Creating economic analysis task for Argentina 2024-2025")
            
            url = f"{self.backend_url}/api/agent/chat"
            payload = {
                "message": "Realizar un an√°lisis completo sobre la situaci√≥n econ√≥mica de Argentina en 2024-2025",
                "task_id": f"test-economic-analysis-{int(time.time())}"
            }
            
            response = self.session.post(url, json=payload, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                task_id = data.get('task_id') or payload['task_id']
                
                if task_id:
                    self.created_task_id = task_id
                    details = f"Economic analysis task created successfully: {task_id}"
                    self.log_test("2. Create Economic Analysis Task", True, details)
                    return task_id
                else:
                    self.log_test("2. Create Economic Analysis Task", False, f"No task_id in response: {data}")
                    return None
            else:
                self.log_test("2. Create Economic Analysis Task", False, f"HTTP {response.status_code}: {response.text}")
                return None
                
        except Exception as e:
            self.log_test("2. Create Economic Analysis Task", False, "Request failed", e)
            return None

    def test_3_monitor_plan_generation(self):
        """Test 3: Monitor Plan Generation"""
        try:
            print("üîÑ Test 3: Monitoring plan generation by the agent")
            
            if not self.created_task_id:
                self.log_test("3. Plan Generation Monitoring", False, "No task_id available")
                return False
            
            print(f"   üìã Monitoring plan generation for task: {self.created_task_id}")
            
            # Wait for plan to be generated
            time.sleep(15)
            
            # Get task status to check plan
            url = f"{self.backend_url}/api/agent/get-task-status/{self.created_task_id}"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                plan = data.get('plan', [])
                
                if plan and len(plan) > 0:
                    self.plan_generated = plan
                    plan_steps = len(plan)
                    step_titles = [step.get('title', 'No title') for step in plan[:3]]  # First 3 steps
                    
                    details = f"SUCCESS: Plan generated with {plan_steps} steps. First steps: {step_titles}"
                    self.log_test("3. Plan Generation Monitoring", True, details)
                    return True
                else:
                    details = f"FAIL: No plan generated or empty plan"
                    self.log_test("3. Plan Generation Monitoring", False, details)
                    return False
            else:
                self.log_test("3. Plan Generation Monitoring", False, f"Could not get task status: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("3. Plan Generation Monitoring", False, "Request failed", e)
            return False

    def test_4_monitor_web_search_behavior(self):
        """Test 4: Monitor Web Search Keywords and Behavior"""
        try:
            print("üîÑ Test 4: Monitoring web search keywords and behavior")
            
            if not self.created_task_id:
                self.log_test("4. Web Search Behavior", False, "No task_id available")
                return False
            
            print(f"   üîç Monitoring web search behavior for task: {self.created_task_id}")
            
            # Start behavior monitoring in background
            log_thread = threading.Thread(
                target=self.monitor_agent_behavior_logs, 
                args=(180,),  # Monitor for 180 seconds
                daemon=True
            )
            log_thread.start()
            
            # Wait for search activity
            time.sleep(185)  # Wait for monitoring to complete
            
            # Analyze web search keywords
            total_keywords = len(self.web_search_keywords)
            problematic_keywords = [k for k in self.web_search_keywords if "REALIZA INFORME" in k or "sin sentido" in k.lower()]
            good_keywords = [k for k in self.web_search_keywords if "Argentina" in k or "econ√≥mica" in k or "inflaci√≥n" in k or "2024" in k or "2025" in k]
            
            if total_keywords > 0:
                if len(problematic_keywords) > 0:
                    details = f"PROBLEMATIC: {total_keywords} keywords found, {len(problematic_keywords)} problematic: {problematic_keywords[:3]}"
                    self.log_test("4. Web Search Behavior", False, details)
                    return False
                elif len(good_keywords) > 0:
                    details = f"SUCCESS: {total_keywords} keywords found, {len(good_keywords)} relevant: {good_keywords[:3]}"
                    self.log_test("4. Web Search Behavior", True, details)
                    return True
                else:
                    details = f"PARTIAL: {total_keywords} keywords found but quality unclear: {self.web_search_keywords[:3]}"
                    self.log_test("4. Web Search Behavior", True, details)
                    return True
            else:
                details = f"FAIL: No web search keywords detected in logs"
                self.log_test("4. Web Search Behavior", False, details)
                return False
                
        except Exception as e:
            self.log_test("4. Web Search Behavior", False, "Request failed", e)
            return False

    def test_5_analyze_source_diversity(self):
        """Test 5: Analyze Source Diversity"""
        try:
            print("üîÑ Test 5: Analyzing source diversity and information quality")
            
            if not self.created_task_id:
                self.log_test("5. Source Diversity Analysis", False, "No task_id available")
                return False
            
            # Get task results to analyze sources
            url = f"{self.backend_url}/api/agent/get-task-status/{self.created_task_id}"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                task_data = data
                
                # Extract sources from task results and logs
                unique_sources = set()
                total_content_length = 0
                real_data_indicators = 0
                
                # From task results
                if 'plan' in task_data:
                    for step in task_data.get('plan', []):
                        if 'result' in step:
                            result = step.get('result', {})
                            content = str(result.get('content', '')) or str(result.get('summary', ''))
                            if content and len(content) > 100:
                                total_content_length += len(content)
                                
                                # Count real data indicators
                                real_indicators = ['%', '$', 'millones', 'miles', 'pesos', 'd√≥lares', '2024', '2025', 'INDEC', 'Banco Central']
                                for indicator in real_indicators:
                                    real_data_indicators += content.count(indicator)
                            
                            # Check for sources in web search results
                            if 'data' in result and isinstance(result['data'], list):
                                for item in result['data']:
                                    url_item = item.get('url', '')
                                    if url_item and url_item.startswith('http'):
                                        try:
                                            from urllib.parse import urlparse
                                            domain = urlparse(url_item).netloc
                                            if domain:
                                                unique_sources.add(domain)
                                        except:
                                            pass
                
                # From logged sources
                for source in self.sources_visited:
                    try:
                        from urllib.parse import urlparse
                        domain = urlparse(source).netloc
                        if domain:
                            unique_sources.add(domain)
                    except:
                        pass
                
                sources_count = len(unique_sources)
                
                # Analyze results
                if sources_count >= 5 and real_data_indicators >= 10 and total_content_length >= 1000:
                    details = f"SUCCESS: {sources_count} sources, {real_data_indicators} real data indicators, {total_content_length} chars"
                    self.log_test("5. Source Diversity Analysis", True, details)
                    return True
                elif sources_count >= 3 or real_data_indicators >= 5:
                    details = f"PARTIAL: {sources_count} sources, {real_data_indicators} real data indicators, {total_content_length} chars"
                    self.log_test("5. Source Diversity Analysis", True, details)
                    return True
                else:
                    details = f"FAIL: Only {sources_count} sources, {real_data_indicators} real data indicators, {total_content_length} chars"
                    self.log_test("5. Source Diversity Analysis", False, details)
                    return False
            else:
                self.log_test("5. Source Diversity Analysis", False, f"Could not get task status: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("5. Source Diversity Analysis", False, "Request failed", e)
            return False

    def test_6_evaluate_task_completion(self):
        """Test 6: Evaluate Task Completion and Final Results"""
        try:
            print("üîÑ Test 6: Evaluating task completion and final results")
            
            if not self.created_task_id:
                self.log_test("6. Task Completion Evaluation", False, "No task_id available")
                return False
            
            # Get final task status
            url = f"{self.backend_url}/api/agent/get-task-status/{self.created_task_id}"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                status = data.get('status', 'unknown')
                progress = data.get('progress', 0)
                completed_steps = data.get('completed_steps', 0)
                total_steps = data.get('total_steps', 0)
                
                self.task_completion_status = {
                    'status': status,
                    'progress': progress,
                    'completed_steps': completed_steps,
                    'total_steps': total_steps
                }
                
                if status == 'completed' and progress >= 100:
                    details = f"SUCCESS: Task completed - {completed_steps}/{total_steps} steps, {progress}% progress"
                    self.log_test("6. Task Completion Evaluation", True, details)
                    return True
                elif status == 'running' and completed_steps > 0:
                    details = f"PARTIAL: Task in progress - {completed_steps}/{total_steps} steps, {progress}% progress"
                    self.log_test("6. Task Completion Evaluation", True, details)
                    return True
                else:
                    details = f"FAIL: Task not progressing - Status: {status}, {completed_steps}/{total_steps} steps"
                    self.log_test("6. Task Completion Evaluation", False, details)
                    return False
            else:
                self.log_test("6. Task Completion Evaluation", False, f"Could not get task status: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("6. Task Completion Evaluation", False, "Request failed", e)
            return False

    def run_mitosis_behavior_analysis(self):
        """Run comprehensive Mitosis agent behavior analysis"""
        print("üöÄ MITOSIS AGENT BEHAVIOR ANALYSIS")
        print("=" * 80)
        print(f"Backend URL: {self.backend_url}")
        print(f"Test Time: {datetime.now().isoformat()}")
        print(f"Test Task: An√°lisis completo sobre la situaci√≥n econ√≥mica de Argentina en 2024-2025")
        print(f"FOCUS: Identify problems with web searches and agent behavior")
        print()
        
        # Test 1: Backend Health
        print("=" * 60)
        health_ok = self.test_1_backend_health()
        if not health_ok:
            print("‚ùå Backend health check failed. Aborting tests.")
            return self.test_results
        
        # Test 2: Create Economic Analysis Task
        print("=" * 60)
        task_id = self.test_2_create_economic_analysis_task()
        if not task_id:
            print("‚ùå Failed to create economic analysis task. Aborting remaining tests.")
            self.print_summary()
            return self.test_results
        
        # Test 3: Monitor Plan Generation
        print("=" * 60)
        plan_ok = self.test_3_monitor_plan_generation()
        
        # Test 4: Monitor Web Search Behavior (CRITICAL)
        print("=" * 60)
        search_ok = self.test_4_monitor_web_search_behavior()
        
        # Test 5: Analyze Source Diversity
        print("=" * 60)
        sources_ok = self.test_5_analyze_source_diversity()
        
        # Test 6: Evaluate Task Completion
        print("=" * 60)
        completion_ok = self.test_6_evaluate_task_completion()
        
        # Summary
        self.print_summary()
        
        return self.test_results

    def print_summary(self):
        """Print comprehensive test summary with behavior analysis"""
        print("\n" + "=" * 80)
        print("üéØ MITOSIS AGENT BEHAVIOR ANALYSIS SUMMARY")
        print("=" * 80)
        
        passed = sum(1 for result in self.test_results if result['success'])
        total = len(self.test_results)
        
        print(f"Tests Passed: {passed}/{total}")
        print()
        
        # Analyze specific problems reported by user
        print("üîç SPECIFIC PROBLEM ANALYSIS:")
        print()
        
        # Problem 1: "Solo recorre 1 o 2 fuentes, no logra sacar informaci√≥n real"
        sources_count = len(set(self.sources_visited))
        print(f"üìä SOURCES VISITED: {sources_count}")
        if sources_count <= 2:
            print("   üö® CONFIRMED PROBLEM: Only 1-2 sources visited")
        elif sources_count >= 5:
            print("   ‚úÖ GOOD: Multiple sources visited")
        else:
            print("   ‚ö†Ô∏è MODERATE: Some sources visited but could be more")
        
        # Problem 2: "Las b√∫squedas web est√°n siendo P√âSIMAS, pone keywords sin sentido como REALIZA INFORME"
        problematic_keywords = [k for k in self.web_search_keywords if "REALIZA INFORME" in k]
        good_keywords = [k for k in self.web_search_keywords if any(term in k.lower() for term in ['argentina', 'econ√≥mica', 'inflaci√≥n', '2024', '2025'])]
        
        print(f"üîç WEB SEARCH KEYWORDS ANALYSIS:")
        print(f"   Total keywords: {len(self.web_search_keywords)}")
        print(f"   Problematic keywords: {len(problematic_keywords)}")
        print(f"   Relevant keywords: {len(good_keywords)}")
        
        if len(problematic_keywords) > 0:
            print("   üö® CONFIRMED PROBLEM: Problematic keywords detected")
            print(f"   Examples: {problematic_keywords[:3]}")
        elif len(good_keywords) > 0:
            print("   ‚úÖ GOOD: Relevant keywords used")
            print(f"   Examples: {good_keywords[:3]}")
        else:
            print("   ‚ö†Ô∏è UNCLEAR: No clear keyword pattern detected")
        
        # Problem 3: "No logra cumplir con la tarea completamente"
        if self.task_completion_status:
            status = self.task_completion_status['status']
            progress = self.task_completion_status['progress']
            completed_steps = self.task_completion_status['completed_steps']
            total_steps = self.task_completion_status['total_steps']
            
            print(f"üìã TASK COMPLETION ANALYSIS:")
            print(f"   Status: {status}")
            print(f"   Progress: {progress}%")
            print(f"   Steps: {completed_steps}/{total_steps}")
            
            if status == 'completed' and progress >= 100:
                print("   ‚úÖ GOOD: Task completed successfully")
            elif completed_steps > 0:
                print("   ‚ö†Ô∏è PARTIAL: Task in progress but not complete")
            else:
                print("   üö® CONFIRMED PROBLEM: Task not progressing")
        
        # Problem 4: "El proceso y resultado no son del todo correcto"
        print(f"üéØ OVERALL PROCESS ANALYSIS:")
        
        critical_issues = []
        for result in self.test_results:
            if not result['success']:
                critical_issues.append(result['test'])
        
        if len(critical_issues) == 0:
            print("   ‚úÖ GOOD: All tests passed, process seems correct")
        elif len(critical_issues) <= 2:
            print("   ‚ö†Ô∏è MODERATE: Some issues detected")
            print(f"   Issues: {critical_issues}")
        else:
            print("   üö® CONFIRMED PROBLEM: Multiple critical issues")
            print(f"   Issues: {critical_issues}")
        
        print()
        
        # Detailed evidence
        print("üìã DETAILED EVIDENCE:")
        
        if self.plan_generated:
            print(f"   ‚úÖ Plan Generated: {len(self.plan_generated)} steps")
        else:
            print("   ‚ùå No Plan Generated")
        
        print(f"   üîç Keywords Captured: {len(self.web_search_keywords)}")
        if self.web_search_keywords:
            print(f"   Sample Keywords: {self.web_search_keywords[:5]}")
        
        print(f"   üåê Sources Visited: {len(self.sources_visited)}")
        if self.sources_visited:
            unique_domains = set()
            for source in self.sources_visited[:5]:
                try:
                    from urllib.parse import urlparse
                    domain = urlparse(source).netloc
                    if domain:
                        unique_domains.add(domain)
                except:
                    pass
            print(f"   Sample Domains: {list(unique_domains)[:3]}")
        
        print(f"   ‚úÖ Validation Events: {len(self.validation_events)}")
        print(f"   üìã Backend Log Entries: {len(self.backend_logs)}")
        
        print()
        
        # Final recommendations
        print("üìã RECOMMENDATIONS FOR MAIN AGENT:")
        
        if sources_count <= 2:
            print("   1. üö® CRITICAL: Fix source diversity - agent only visiting 1-2 sources")
        
        if len(problematic_keywords) > 0:
            print("   2. üö® CRITICAL: Fix web search keywords - avoid generic terms like 'REALIZA INFORME'")
        
        if not self.plan_generated:
            print("   3. üö® CRITICAL: Fix plan generation - no plan was generated")
        
        if self.task_completion_status and self.task_completion_status['status'] != 'completed':
            print("   4. ‚ö†Ô∏è MAJOR: Fix task completion - task not finishing properly")
        
        if len(self.web_search_keywords) == 0:
            print("   5. ‚ö†Ô∏è MAJOR: Fix web search logging - no keywords detected in logs")
        
        if len(critical_issues) == 0 and sources_count > 3 and len(good_keywords) > 0:
            print("   ‚úÖ GOOD: Agent behavior seems to be working correctly")
        
        print()
        print("üìä MITOSIS AGENT BEHAVIOR ANALYSIS COMPLETE")
        
        if self.created_task_id:
            print(f"üìù Test Task ID: {self.created_task_id}")
            print("   Use this ID to check detailed logs and debug if needed")

if __name__ == "__main__":
    tester = MitosisAgentBehaviorTester()
    results = tester.run_mitosis_behavior_analysis()
    
    # Exit with appropriate code
    failed_tests = sum(1 for result in results if not result['success'])
    sys.exit(failed_tests)